first?
Perhaps the first line of the file is the module name? OR implicit from the filename :) even better
### <- 3 or more! == multi line comments
this is a comment?
This will eventually be executed
Easy auto formating would be usefull as well which requires NON-whitespace sensitive stuff
Capitilizeation doesn't matter in the function names but the auto-formater will make them all lowercase

the mix of non-line oriented and line oriented may be tricky though...
What if the whole file was flattened into a line with implicit "."'s between each line?
SO LONG AS there wasn't any unclosed ()'s or []'s or {}'s?
###

# send to the screen (AKA print)
print "Hello world!" # less things to type = the less thigns (heh) to mess up
print to:screen "Hello world!" # named?

# you can put two statements on one line possibly
print "Hello world!"; print "Two things on the same line!"

repeat 3 do
   print "hello,"  
   print "goodbye\n"
end

box mybox = 15 # easier to type?

# puts somthing in a box
a <- 2     # ?
a = 2      # ?
put 2 in a # ?


###
this does somthing diffrent than most languages, it puts a 2 in "a" but takes the old value and puts it into box "b"
This would probably be evaluated from right to left? That might be confusing though
Perhaps it would require them to group things in parenthesis... which are used for comments right now... ugh....
###


fun hello (yourName) do
   print "Hello," yourName ". welcome to ez!"
end

# use it:
hello("Gage")
hello ("Gage") # whitesapce is ok.

[ 1 2 3 4 5 ] # <- lists (whitespace seperated)









