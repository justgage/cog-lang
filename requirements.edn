{
 :title "Requirements Document"
 :author "Gage Peterson"
 :date "May 30th 2015"
 :lang-name "The programing language"
 :definitions 
 { 

  "Standard out"
  "Usually the main output of a console. Some place specified for most output of the program to go."

  "The Primitives"
  "The basic built in types of the language including: Floats, Strings, Lists and Booleans"
  }

 :reqs
 [
  ;;  Use shall, will, and may in the functional-requirements specification. When I review your requirements, I assume that
  ;;  shall functional-requirements shall be implemented. I also assume that will and may requirements will not be
  ;;  implemented.
  ;;
  ;;  Include at least one functional-requirement regarding execution time. For example, the product shall calculate the
  ;;  answer within one second.
  ;;
  ;;  Format your functional-requirements specification in four columns, as follows:
  ;;
  ;;  1. A unique identifier for the functional functional-requirement; sequential numbers work well
  ;;  2. Functional functional-requirement (note: if the demonstration requires reviewing code, it's not a functional requirement)
  ;;  3. Demonstration scenario(s) for that functional-requirement
  ;;  4. Success measure(s) for that functional-requirement
  ;;
  ;;  Use a separate row for each functional-requirement.
  ;;  Do not submit as a spreadsheet. Use a word processor.
  ;;  The functional-requirements are due on the date specified in your proposal.

  {
   :type :shall
   :functional-requirement "be able to print the primitives to standard out"
   :demonstration-scenarios 
   [
    "print 1.0"
    "print 'hi'"
    "print [1.0 2.0 3.0]"
    ] 
   :success-measure 
   [
    "prints 1.0 to standard out"
    "prints hi to standard out"
    "prints [1.0 2.0 3.0] to standard out"
    ] 
   }

  {
   :type :shall
   :functional-requirement "have constructs that allow for a block of code to be executed or not executed based on a condition"
   :demonstration-scenarios 
   [
    "if true then print 'hello'"
    "if false then print 'hello'"
    ] 
   :success-measure 
   [ 
    "prints 'hello' to standard out"
    "does nothing"
    ] 
   }

  {
   :type :shall
   :functional-requirement "be able to store primitives in a variable"
   :demonstration-scenarios 
   [
    "box a = 1.0
    print a"
    "box a = [1.0 2.0 3.0]
    print a"
    "box a = \"hello\"
    print a"
    ] 
   :success-measure 
   [
    "1.0 is printed to standard out"
    "[1.0 2.0 3.0] is printed to standard out"
    "'hello' is printed to standard out"
    ] 
   } 

  {
   :type :shall
   :functional-requirement "be able to repeat blocks of code"
   :demonstration-scenarios 
   [
    "repeat 4 print 'hello '"
    ] 
   :success-measure  
   [
    "standard out contains: 'hello hello hello hello'"
    ] 
   }

  {
   :type :shall
   :functional-requirement "be able to define and run functions with return values"
   :demonstration-scenarios 
   [
    "fun add x y = x + y
    print (add 2.0 5.0)"
    ] 
   :success-measure 
   [
    "7.0 is printed to standard out"
    ] 
   }

  {
   :type :shall
   :functional-requirement "be able to check if two floats are equal"
   :demonstration-scenarios 
   [
    "2.5 == 2.5"
    "2.5 == 2.0"
    "2.0 == 3.0"
    ] 
   :success-measure 
   [
    "returns true"
    "returns false"
    "returns false"
    ] 
   }
{
 :type :shall
 :functional-requirement "be able to check if one float is greater than another"
 :demonstration-scenarios 
 [
  "2.0 < 0.0"
  "2.0 < 3.0"
  "2.0 > 3.0"
  "2.0 > 2.0"
  ] 
 :success-measure 
 [
  "returns false"
  "returns true"
  "returns false"
  "returns false"
  ] 
 }

{
 :type :shall
 :functional-requirement "be able to tell if one float is less than or equal to another"
 :demonstration-scenarios 
 [
  "2.0 <= 3.0"
  "2.0 <= 1.0"
  "2.0 <= 2.0"
  ] 
 :success-measure 
 [
  "returns true"
  "returns false"
  "returns true"
  ] 
 }

{
 :type :shall
 :functional-requirement "be able to tell if one float is greater than or equal to another"
 :demonstration-scenarios 
 [
  "2.0 >= 3.0"
  "2.0 >= 1.0"
  "2.0 >= 2.0"
  ] 
 :success-measure 
 [
  "returns false"
  "returns true"
  "returns true"
  ] 
 }


{
 :type :shall
 :functional-requirement "be able to tell if two lists are equal"
 :demonstration-scenarios 
 [
  "[] == []"
  "[1.0 2.0 3.0] == [1.0 2.0 3.0]"
  "[1.0 10.0 3.0] == [1.0 2.0 3.0]"
  "[] == [1.0 2.0 3.0]"
  ] 
 :success-measure 
 [
  "return true"
  "return true"
  "return false"
  "return false"
  ] 
 }

{
 :type :shall
 :functional-requirement "be able to tell if two strings are equal"
 :demonstration-scenarios 
 [
  "'' == ''"
  "'a' == 'a'"
  "'yellow' == 'hello'"
  "'yellow' == 'yellow'"
  ] 
 :success-measure 
 [
  "return true"
  "return true"
  "return false"
  "return true"
  ] 
 }

{
 :type :shall
 :functional-requirement "be able to negate a boolean statement"
 :demonstration-scenarios 
 [
  "not true"
  "not false"
  ] 
 :success-measure 
 [
  "returns false"
  "returns true"
  ] 
 }

{
 :type :shall
 :functional-requirement "be able to connect two boolean statements with an 'and' operator"
 :demonstration-scenarios 
 [
  "false and false"
  "false and true"
  "true and false"
  "true and true"
  ] 
 :success-measure 
 [
  "returns false"
  "returns false"
  "returns false"
  "returns true"
  ] 
 }

{
 :type :shall
 :functional-requirement "be able to connect two boolean expressions with a 'or' operator"
 :demonstration-scenarios 
 [
  "false or false"
  "false or true"
  "true  or false"
  "true  or true"
  ] 
 :success-measure 
 [
  "returns false"
  "returns true"
  "returns true"
  "returns true"
  ] 
 }

{
 :type :SHALL
 :functional-requirement "be able to parse and execute the basic statement outlined in demonstration scenarios in a file in 1 second"
 :demonstration-scenarios 
 [
  "print 'hello'"
  "print 2+2"
  ] 
 :success-measure 
 [
  "the program prints 'hello' and exits within 1 second"
  "the program prints '4' and exits within 1 second"
  ] 
 }

{
 :type :MAY
 :functional-requirement "be able to step through the code line by line and see how variables change"
 :demonstration-scenarios 
 [
  "debugger run on a code file containing:
  
  box a = 2
  box a = a + 2"
  ] 
 :success-measure 
 [
  "The debugger outputs:
  box a = 2
  box a = 4
  "
  ] 
 }

]
}

