{
 :title "functional-requirements Document for the 'fun' programing language"
 :lang-name "The programing language"
 :definitions 
 { 
            
  "Abstract syntax tree (AST)"
  " An abstract syntax tree (AST) is a tree representation of the abstract syntactic structure of source code written in a programming language." 

  "Interpeter"
  " This is the part that turns the AST into action. Action meaning making the computer do what the AST said to do based on the rules of the language."

  "Tokenizer"
  " Breaks a string of characters into \"tokens\" or the pieces of the programing language (if block, a function, etc...) "

  "Parser"
  " The part of the program that turns the tokens into an AST.  "

  "Spec"
  " Stands for \"functional-requirements specification\" which will be a document describing what my programing language is required to preform.  "

  "Standard in"
  "Usually the main output of a console. Some place spesified for most output of the program to go."
  }

 :reqs {

        ;;  Use shall, will, and may in the functional-requirements specification. When I review your requirements, I assume that
        ;;  shall functional-requirements shall be implemented. I also assume that will and may requirements will not be
        ;;  implemented.
        ;;
        ;;  Include at least one functional-requirement regarding execution time. For example, the product shall calculate the
        ;;  answer within one second.
        ;;
        ;;  Format your functional-requirements specification in four columns, as follows:
        ;;
        ;;  1. A unique identifier for the functional functional-requirement; sequential numbers work well
        ;;  2. Functional functional-requirement (note: if the demonstration requires reviewing code, it's not a functional requirement)
        ;;  3. Demonstration scenario(s) for that functional-requirement
        ;;  4. Success measure(s) for that functional-requirement
        ;;
        ;;  Use a separate row for each functional-requirement.
        ;;  Do not submit as a spreadsheet. Use a word processor.
        ;;  The functional-requirements are due on the date specified in your proposal.



        :read-and-print
        {
         :type :SHALL
         :functional-requirement "be able to print various primitives to standard out"
         :demonstration-scenarios 
         [
          "valid code was ran through the executer that contained a print statment with a string as an argument"
          "valid code was ran through the executer that contained a print statment with a integer as an argument"
          ] 
         :success-measure 
         [
          "print out the string in the argment"
          "print out the the integer in the argment"
          ] 
         }

        :conditionals
        {
         :type :SHALL
         :functional-requirement "have constructs that allow for a block of code to be executed or not executed based on a condition"
         :demonstration-scenarios 
         [
          "valid code was ran through the interpeter that contined an if statement with a 'true' statment as it's condition and a print statement in it's body"
          "valid code was ran through the interpeter that contined an if statement with a 'false' statment as it's condition and a print statement in it's body"
          ] 
         :success-measure 
         [ 
          "the code in the body executes the print statement showing it on standard in"
          "the code in the body does not execute the print statement not showing it on standard in"
          ] 
         }

        ;; :have-a-string-datatype
        ;; {
        ;;  :type :SHALL
        ;;  :functional-requirement "have a string data type"
        ;;  :demonstration-scenarios 
        ;;  [
        ;;   ""
        ;;   ] 
        ;;  :success-measure [] 
        ;;  }
        ;;

        ;; :have-a-float-data-type
        ;; {
        ;;  :type :SHALL
        ;;  :functional-requirement "have a float data type"
        ;;  :demonstration-scenarios [] 
        ;;  :success-measure [] 
        ;;  }

        ;; :have-a-list-data-type
        ;; {
        ;;  :type :SHALL
        ;;  :functional-requirement "have a list data type"
        ;;  :demonstration-scenarios [] 
        ;;  :success-measure [] 
        ;;  }

        ;; :have-a-boolean-data-type
        ;; {
        ;;  :type :SHALL
        ;;  :functional-requirement "have a boolean data type"
        ;;  :demonstration-scenarios [] 
        ;;  :success-measure [] 
        ;;  }

        :store-to-variables
        {
         :type :SHALL
         :functional-requirement "be able to store primitives in temporary memory in the form of a variable"
         :demonstration-scenarios 
         [
          "A code file is ran with the code that will store a 2 in a variable and print it to the screen"
          ] 
         :success-measure 
         [
          "The code file prints out the 2 that was stored"
          ] 
         } 

        :repeat-blocks
        {
         :type :SHALL
         :functional-requirement "be able to repeat blocks of code"
         :demonstration-scenarios 
         [
          "A code file that has a print statement inside of a repeat block, with the number 5 as a  parameter"
          ] 
         :success-measure  
         [
          "The print statement inside of the repeat block will run exactly 5 times"
          ] 
         }

        :functions-make-and-use
        {
         :type :SHALL
         :functional-requirement "be able to define and run functions"
         :demonstration-scenarios 
         [
          "A code file contains the function definition of a 'add' fuction"
          ] 
         :success-measure 
         [
          "When the afore mentioned function is ran then it will add the numbers 3 and 2 to equal 5"
          ] 
         }

        :functions-return
        {
         :type :SHALL
         :functional-requirement "have a way for functions to return values"
         :demonstration-scenarios 
         [
          "A function that adds two numbers returns a 5 to a print statement"
          ] 
         :success-measure 
          [ 
           "the print statement prints the 5 that was returned"
           ] 
         }

        :equality-numbers
        {
         :type :SHALL
         :functional-requirement "be able to check if two numbers are equal"
         :demonstration-scenarios 
         [
          "A code file contains a comparision operator returning to a print statement that is checking if 2 is equal to 2"
          "A code file contains a comparision operator returning to a print statement that is checking if 2 is equal to 3"
          ] 
         :success-measure 
         [
          "the print statement will print out 'true'"
          "the print statement will print out 'false'"
          ] 
         }

        :equality-lists
        {
         :type :SHALL
         :functional-requirement "be able to check if two lists are structurally equivalent, meaning, they contain the same elements in the same order."
         :demonstration-scenarios 
         [
          "a list which contains 1, 2 and 3 is checked against itself"
          "a list which contains 1, 2 and 3 is checked against another list containing 1, 2, 3"
          "a list which contains 1, 2 and 9 is checked against another list containing 1, 2, 3"
          "a list which contains nothing is checked against another list containing 1, 2, 3"
          ] 
         :success-measure 
         [
          "returns true"
          "returns true"
          "returns false"
          "returns false"
          ] 
         }
}
}

